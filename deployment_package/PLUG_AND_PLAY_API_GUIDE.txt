================================================================================
                    PLUG-AND-PLAY BARCODE SCANNER SYSTEM
                    FRONTEND APIs & IoT Hub Integration Guide
================================================================================

ðŸ“¡ REGISTRATION SUCCESS MESSAGE ENDPOINTS
================================================================================

1. FRONTEND APIs (Receive Registration Success Messages)
   -------------------------------------------------------
   
   PRIMARY ENDPOINT:
   â€¢ URL: https://iot.caleffionline.it/api/registration-notification
   â€¢ Method: POST
   â€¢ Purpose: Main frontend notification for device registration
   
   FALLBACK ENDPOINTS:
   â€¢ URL: https://api2.caleffionline.it/api/v1/raspberry/piStatus
   â€¢ URL: https://iot.caleffionline.it/api/pi-status
   â€¢ URL: https://iot.caleffionline.it/api/pi-device-register
   
   REGISTRATION PAYLOAD STRUCTURE:
   {
     "device_id": "pi-1234abcd",
     "timestamp": "2025-09-03T10:15:30Z",
     "status": "registered",
     "operation_type": "device_registration",
     "messageType": "device_registration",
     "action": "registration_confirmation",
     "no_inventory_update": true,
     "registration_only": true,
     "pi_ip": "192.168.1.18"
   }

2. AZURE IoT HUB APIs (Receive Registration Messages)
   --------------------------------------------------
   
   IoT HUB ENDPOINT:
   â€¢ Hub: CaleffiIoT.azure-devices.net
   â€¢ Protocol: AMQP/HTTPS
   â€¢ Message Type: device_registration
   
   IoT HUB MESSAGE STRUCTURE:
   {
     "deviceId": "pi-1234abcd",
     "messageType": "device_registration",
     "status": "registered",
     "deviceType": "raspberry_pi",
     "capabilities": ["barcode_scanning", "inventory_tracking"],
     "timestamp": "2025-09-03T10:15:30Z",
     "networkInfo": {
       "ip_address": "192.168.1.18",
       "hostname": "raspberrypi"
     }
   }

================================================================================
ðŸ”Œ PLUG-AND-PLAY SYSTEM WORKFLOW
================================================================================

STEP 1: DEVICE DISCOVERY
------------------------
â€¢ System automatically detects Raspberry Pi devices on network
â€¢ Uses ARP scanning to find devices with MAC prefixes:
  - b8:27:eb (Pi 1/2/3)
  - dc:a6:32 (Pi 4)
  - e4:5f:01 (Pi 4)
  - 2c:cf:67 (Your specific Pi)
â€¢ Tests connectivity on ports 22 (SSH) and 5000 (web service)

STEP 2: AUTOMATIC REGISTRATION
------------------------------
â€¢ Generates device ID from MAC address: pi-{last8chars}
â€¢ Example: MAC d8:bb:c1:32:30:07 â†’ Device ID: pi-c1323007
â€¢ Registers with Azure IoT Hub automatically
â€¢ Creates device-specific connection string

STEP 3: REGISTRATION CONFIRMATION
---------------------------------
â€¢ Sends confirmation to Frontend API
â€¢ Sends registration message to IoT Hub
â€¢ Saves device info locally for offline capability
â€¢ Sets up heartbeat and status monitoring

STEP 4: READY FOR BARCODE SCANNING
----------------------------------
â€¢ Device ready to scan barcodes
â€¢ All scans sent to both Frontend API and IoT Hub
â€¢ Automatic retry if network issues
â€¢ Local storage for offline operation

================================================================================
ðŸš€ HOW TO START PLUG-AND-PLAY SYSTEM
================================================================================

METHOD 1: WEB INTERFACE (Recommended)
-------------------------------------
1. cd /var/www/html/abhimanyu/barcode_scanner_clean/deployment_package
2. python3 src/barcode_scanner_app.py
3. Open browser: http://localhost:7861
4. System automatically discovers Pi devices
5. Click "Register Device" when Pi detected
6. Start scanning barcodes immediately

METHOD 2: RASPBERRY PI DIRECT MODE
----------------------------------
1. On Raspberry Pi device:
   cd /var/www/html/abhimanyu/barcode_scanner_clean/deployment_package
   python3 src/auto_barcode_service.py

2. System will:
   â€¢ Auto-generate device ID from hardware
   â€¢ Register with IoT Hub automatically
   â€¢ Start listening for barcode scanner input
   â€¢ Send all scans to API and IoT Hub

METHOD 3: PLUG-AND-PLAY REGISTRATION
------------------------------------
1. Connect USB barcode scanner to Pi
2. Run: python3 src/barcode_scanner_app.py
3. If not registered, system enters plug-and-play mode
4. Scan ANY barcode to register device
5. Device automatically registered and ready

================================================================================
ðŸ“Š API ENDPOINTS SUMMARY
================================================================================

REGISTRATION ENDPOINTS:
â€¢ POST https://iot.caleffionline.it/api/registration-notification
â€¢ POST https://api2.caleffionline.it/api/v1/raspberry/piStatus
â€¢ POST https://iot.caleffionline.it/api/pi-device-register

BARCODE SCANNING ENDPOINTS:
â€¢ POST https://api2.caleffionline.it/api/v1/raspberry/barcodeScan
â€¢ POST https://iot.caleffionline.it/api/barcode-scan

DEVICE STATUS ENDPOINTS:
â€¢ POST https://iot.caleffionline.it/api/pi-device-heartbeat
â€¢ POST https://iot.caleffionline.it/api/pi-device-connected

IoT HUB TOPICS:
â€¢ Device Registration: messageType = "device_registration"
â€¢ Barcode Scans: messageType = "barcode_scan"
â€¢ Heartbeat: messageType = "heartbeat"
â€¢ Status Updates: messageType = "status_update"

================================================================================
ðŸ”§ CONFIGURATION FILES
================================================================================

MAIN CONFIG: /deployment_package/config.json
{
  "frontend": {
    "notification_url": "https://iot.caleffionline.it/api/registration-notification",
    "timeout": 10
  },
  "iot_hub": {
    "connection_string": "HostName=CaleffiIoT.azure-devices.net;...",
    "device_registry": ["pi-c1323007", "pi-5284d8ff"]
  },
  "raspberry_pi": {
    "dynamic_discovery": true,
    "auto_detected_ip": "192.168.1.18"
  }
}

DEVICE CONFIG: /deployment_package/src/device_config.json
{
  "devices": {},
  "registration_tokens": {},
  "last_updated": "2025-09-03T10:15:30Z"
}

================================================================================
ðŸŽ¯ SUCCESS INDICATORS
================================================================================

REGISTRATION SUCCESS LOGS:
âœ… Device pi-1234abcd registered with Azure IoT Hub
âœ… Device registration confirmed with API successfully
âœ… Registration confirmation sent to IoT Hub
ðŸ’“ Heartbeat sent successfully
ðŸŽ‰ Device is now ready for barcode scanning

FRONTEND API RESPONSE (Success):
{
  "success": true,
  "message": "Device pi-1234abcd registration confirmed successfully",
  "device_id": "pi-1234abcd",
  "status": "registered"
}

IoT HUB CONFIRMATION:
Device appears in Azure IoT Hub portal with status "Connected"
Device Twin properties show: connectionState = "Connected"

================================================================================
ðŸš« TROUBLESHOOTING
================================================================================

COMMON ISSUES:
1. "No Raspberry Pi devices found"
   â†’ Check network connectivity
   â†’ Verify Pi is on same network segment
   â†’ Check firewall settings

2. "IoT Hub registration failed"
   â†’ Verify connection string in config.json
   â†’ Check Azure IoT Hub service status
   â†’ Ensure device limit not exceeded

3. "API registration failed"
   â†’ Check internet connectivity
   â†’ Verify API endpoints are accessible
   â†’ Check API service status

4. "Device already registered"
   â†’ Normal behavior for existing devices
   â†’ Device will skip registration and start scanning

RESET DEVICE REGISTRATION:
1. Delete device from Azure IoT Hub portal
2. Clear local database: rm barcode_device_mapping.db
3. Restart system - will re-register automatically

================================================================================
ðŸ“± USER EXPERIENCE FLOW
================================================================================

FOR NON-TECHNICAL USERS:
1. Connect USB barcode scanner to computer/Pi
2. Run the application (double-click or command)
3. System automatically finds and registers device
4. Green light/message indicates ready
5. Start scanning barcodes immediately
6. All scans automatically sent to inventory system

ZERO CONFIGURATION REQUIRED:
â€¢ No IP addresses to enter
â€¢ No device IDs to remember
â€¢ No manual registration steps
â€¢ No technical knowledge needed
â€¢ Plug-and-play operation

VISUAL FEEDBACK:
ðŸ”´ Red LED: Error/Offline
ðŸŸ¡ Yellow LED: Connecting/Processing
ðŸŸ¢ Green LED: Success/Ready
ðŸ’™ Blue LED: Scanning in progress

================================================================================
ðŸŽ‰ PLUG-AND-PLAY SYSTEM READY!
================================================================================

The system automatically handles:
âœ… Device discovery and registration
âœ… Network connectivity monitoring
âœ… Automatic retry mechanisms
âœ… Offline/online message queuing
âœ… Real-time status updates
âœ… Error recovery and logging

Just connect your barcode scanner and start scanning! ðŸš€
