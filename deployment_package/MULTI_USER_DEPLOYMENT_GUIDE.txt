================================================================================
                    MULTI-USER BARCODE SCANNER DEPLOYMENT GUIDE
================================================================================

ARCHITECTURE OVERVIEW:
======================

OPTION 1: DISTRIBUTED DEPLOYMENT (Recommended for 1000+ users)
--------------------------------------------------------------
Each location has their own Raspberry Pi running the barcode scanner service.
All devices connect to your centralized IoT Hub and API endpoints.

Structure:
- Location 1: Raspberry Pi â†’ Your IoT Hub
- Location 2: Raspberry Pi â†’ Your IoT Hub  
- Location 3: Raspberry Pi â†’ Your IoT Hub
- ... (1000+ locations)

OPTION 2: SERVER-BASED DEPLOYMENT (For centralized control)
-----------------------------------------------------------
Deploy the service on a central server that manages multiple USB scanners.
Useful for warehouses with multiple scanning stations.

Structure:
- Central Server â†’ Multiple USB Scanners â†’ Your IoT Hub


================================================================================
                              STEP-BY-STEP SETUP
================================================================================

STEP 1: PREPARE DEPLOYMENT PACKAGE
===================================

1.1 Download/Clone the barcode scanner system:
    git clone <your-repository>
    cd barcode_scanner_clean/deployment_package

1.2 Verify package contents:
    deployment_package/
    â”œâ”€â”€ src/                    # Main application code
    â”œâ”€â”€ requirements.txt        # Python dependencies
    â”œâ”€â”€ install.sh             # Auto-installer script
    â”œâ”€â”€ config.json            # Configuration file
    â””â”€â”€ PLUG_AND_PLAY_GUIDE.txt # User instructions

1.3 Customize configuration (config.json):
    - Update API endpoints to your server
    - Set IoT Hub connection details
    - Configure device registration URLs


STEP 2: RASPBERRY PI PREPARATION (For each location)
====================================================

2.1 Hardware Setup:
    - Raspberry Pi 4 (2GB+ RAM recommended)
    - MicroSD card (16GB minimum)
    - USB barcode scanner (HID-compatible)
    - Power supply
    - Network connection (WiFi/Ethernet)

2.2 Install Raspberry Pi OS:
    - Download Raspberry Pi Imager
    - Flash Raspberry Pi OS Lite to SD card
    - Enable SSH in boot partition (create empty 'ssh' file)
    - Configure WiFi (create wpa_supplicant.conf if needed)

2.3 Initial Pi Setup:
    - Boot Pi and connect via SSH
    - Update system: sudo apt update && sudo apt upgrade -y
    - Enable GPIO: sudo raspi-config â†’ Interface Options â†’ GPIO â†’ Enable


STEP 3: SOFTWARE INSTALLATION (Each Pi)
========================================

3.1 Transfer deployment package to Pi:
    scp -r deployment_package/ pi@<pi-ip-address>:~/

3.2 Connect to Pi and install:
    ssh pi@<pi-ip-address>
    cd deployment_package
    chmod +x install.sh
    ./install.sh

3.3 Installation process will:
    - Install Python dependencies
    - Set up virtual environment
    - Configure systemd service for auto-start
    - Set GPIO permissions
    - Create desktop shortcuts


STEP 4: CONFIGURATION VERIFICATION
===================================

4.1 Check service status:
    sudo systemctl status barcode-scanner

4.2 View real-time logs:
    sudo journalctl -u barcode-scanner -f

4.3 Test manual startup:
    cd deployment_package
    ./venv/bin/python src/barcode_scanner_app.py

4.4 Expected startup sequence:
    âœ… Device auto-registered successfully
    âœ… IoT Hub connection established
    ðŸŽ¯ Ready for barcode scan


STEP 5: MASS DEPLOYMENT STRATEGIES
===================================

5.1 PRE-CONFIGURED SD CARDS (Recommended for 1000+ users):
    - Set up one Pi completely
    - Create SD card image: sudo dd if=/dev/mmcblk0 of=barcode-scanner.img
    - Flash image to 1000 SD cards
    - Each Pi will auto-register with unique device ID

5.2 REMOTE DEPLOYMENT SCRIPT:
    Create deployment script on your server:
    
    #!/bin/bash
    curl -fsSL https://your-server.com/install-barcode-scanner.sh | bash
    
    Users run: curl -fsSL https://your-server.com/install.sh | bash

5.3 DOCKER DEPLOYMENT (Advanced):
    Create Docker container with the barcode scanner system:
    
    docker run -d --privileged \
      --name barcode-scanner \
      -v /dev/bus/usb:/dev/bus/usb \
      -v /dev/gpiomem:/dev/gpiomem \
      your-registry/barcode-scanner:latest


STEP 6: CENTRALIZED MONITORING SETUP
=====================================

6.1 Your Backend Server Requirements:
    - API endpoints to receive device registrations
    - IoT Hub to receive barcode scan messages
    - Database to store device information
    - Monitoring dashboard for device status

6.2 API Endpoints to implement:
    POST /api/registration-notification  # Device registration
    POST /api/v1/raspberry/saveDeviceId  # Device ID mapping
    GET  /api/devices                    # List all devices
    POST /api/barcode-scan              # Barcode scan data

6.3 IoT Hub Configuration:
    - Azure IoT Hub or AWS IoT Core
    - Device provisioning service
    - Message routing to your backend
    - Device twin for configuration updates


STEP 7: USER INSTRUCTIONS (For each location)
==============================================

7.1 Hardware Connection:
    - Connect USB barcode scanner to Pi
    - Ensure Pi is connected to internet
    - Power on the Pi

7.2 System Startup:
    - Pi boots and auto-starts barcode scanner service
    - Green LED blinks = Registration successful
    - Red LED blinks = Error (check logs)

7.3 Daily Operation:
    - Simply scan barcodes with USB scanner
    - Each scan automatically sent to inventory system
    - No manual intervention required

7.4 Troubleshooting:
    - Check service: sudo systemctl status barcode-scanner
    - Restart service: sudo systemctl restart barcode-scanner
    - View logs: sudo journalctl -u barcode-scanner -f


STEP 8: SCALING CONSIDERATIONS
==============================

8.1 Network Requirements:
    - Each Pi needs stable internet connection
    - Bandwidth: ~1KB per barcode scan
    - Latency: <5 seconds for real-time updates

8.2 Backend Scaling:
    - Load balancer for API endpoints
    - Database clustering for high availability
    - Message queuing for IoT Hub data processing

8.3 Device Management:
    - OTA updates via IoT Hub device twins
    - Remote configuration changes
    - Health monitoring and alerts


STEP 9: SECURITY BEST PRACTICES
================================

9.1 Device Security:
    - Change default Pi passwords
    - Enable firewall: sudo ufw enable
    - Regular OS updates
    - SSH key authentication

9.2 Network Security:
    - VPN for remote access
    - Certificate-based IoT Hub authentication
    - API endpoint authentication tokens

9.3 Data Security:
    - Encrypt data in transit (HTTPS/TLS)
    - Encrypt data at rest
    - Regular security audits


STEP 10: SUPPORT AND MAINTENANCE
=================================

10.1 Remote Support:
    - SSH access for troubleshooting
    - Log collection scripts
    - Remote restart capabilities

10.2 Updates:
    - Automated update system via IoT Hub
    - Staged rollouts for safety
    - Rollback procedures

10.3 Monitoring:
    - Device health dashboards
    - Alert systems for offline devices
    - Performance metrics collection


================================================================================
                                QUICK REFERENCE
================================================================================

SINGLE DEVICE SETUP:
1. Flash Pi OS â†’ 2. Transfer files â†’ 3. Run ./install.sh â†’ 4. Reboot

MASS DEPLOYMENT:
1. Create master image â†’ 2. Flash 1000 SD cards â†’ 3. Distribute â†’ 4. Power on

TROUBLESHOOTING:
- Service status: sudo systemctl status barcode-scanner
- Logs: sudo journalctl -u barcode-scanner -f  
- Manual start: ./venv/bin/python src/barcode_scanner_app.py

EXPECTED BEHAVIOR:
- Auto device registration on first boot
- Unique device ID per Pi (based on hardware)
- Automatic barcode scanning and IoT Hub messaging
- Local storage with retry for offline scenarios
- LED feedback for status indication

================================================================================
