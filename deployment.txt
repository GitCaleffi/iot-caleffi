================================================================================
UBUNTU SERVER DEPLOYMENT GUIDE - COMMERCIAL BARCODE SCANNER PLUG-AND-PLAY
================================================================================

SYSTEM REQUIREMENTS:
- Ubuntu Server 20.04+ 
- 4GB RAM (8GB recommended for 1000+ devices)
- 20GB disk space
- Internet connection for Azure IoT Hub
- Domain name or static IP address

================================================================================
STEP 1: SYSTEM PREPARATION
================================================================================

# Update system packages
sudo apt update && sudo apt upgrade -y

# Install required packages
sudo apt install -y python3 python3-pip python3-venv nginx sqlite3 git ufw

# Create dedicated user for security
sudo useradd -m -s /bin/bash barcode-scanner
sudo usermod -aG www-data barcode-scanner

# Create application directory
sudo mkdir -p /opt/barcode-scanner
sudo chown barcode-scanner:barcode-scanner /opt/barcode-scanner

================================================================================
STEP 2: APPLICATION DEPLOYMENT
================================================================================

# Copy application files to server
# Upload your barcode_scanner_clean directory to /opt/barcode-scanner/

# Switch to application user
sudo su - barcode-scanner
cd /opt/barcode-scanner

# Create Python virtual environment
python3 -m venv venv
source venv/bin/activate

# Install Python dependencies
pip install -r requirements.txt

# Create production configuration
cp config_template.json config.json

# Edit configuration file with your Azure IoT Hub details
nano config.json

# Required config.json format:
{
  "iot_hub": {
    "connection_string": "HostName=YourHub.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=YourKey"
  },
  "web_server": {
    "host": "0.0.0.0",
    "port": 5000,
    "debug": false
  },
  "commercial_deployment": {
    "auto_registration": true,
    "plug_and_play": true,
    "max_devices": 10000
  }
}

# Set proper permissions
sudo chown -R barcode-scanner:barcode-scanner /opt/barcode-scanner
sudo chmod +x /opt/barcode-scanner/start_production.sh

================================================================================
STEP 3: SYSTEMD SERVICE SETUP
================================================================================

# Create systemd service file
sudo nano /etc/systemd/system/barcode-scanner.service

# Service file content:
[Unit]
Description=Commercial Barcode Scanner Web Service
After=network.target

[Service]
Type=simple
User=barcode-scanner
Group=barcode-scanner
WorkingDirectory=/opt/barcode-scanner
Environment=PATH=/opt/barcode-scanner/venv/bin
ExecStart=/opt/barcode-scanner/venv/bin/python web_app.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target

# Enable and start service
sudo systemctl daemon-reload
sudo systemctl enable barcode-scanner
sudo systemctl start barcode-scanner

# Check service status
sudo systemctl status barcode-scanner

================================================================================
STEP 4: NGINX WEB SERVER SETUP
================================================================================

# Remove default nginx site
sudo rm /etc/nginx/sites-enabled/default

# Create nginx configuration
sudo nano /etc/nginx/sites-available/barcode-scanner

# Nginx configuration content:
server {
    listen 80;
    server_name your-domain.com;  # Replace with your domain/IP

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    location /static {
        alias /opt/barcode-scanner/static;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    location /health {
        proxy_pass http://127.0.0.1:5000/health;
        access_log off;
    }
}

# Enable nginx site
sudo ln -s /etc/nginx/sites-available/barcode-scanner /etc/nginx/sites-enabled/

# Test nginx configuration
sudo nginx -t

# Start nginx
sudo systemctl enable nginx
sudo systemctl start nginx

================================================================================
STEP 5: FIREWALL CONFIGURATION
================================================================================

# Configure UFW firewall
sudo ufw --force enable
sudo ufw allow ssh
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

# Check firewall status
sudo ufw status

================================================================================
STEP 6: SSL CERTIFICATE (OPTIONAL BUT RECOMMENDED)
================================================================================

# Install Certbot for Let's Encrypt SSL
sudo apt install certbot python3-certbot-nginx

# Get SSL certificate (replace with your domain)
sudo certbot --nginx -d your-domain.com

# Auto-renewal test
sudo certbot renew --dry-run

================================================================================
STEP 7: TESTING DEPLOYMENT
================================================================================

# Test system health
curl http://localhost/health

# Test barcode scanning via web interface
# Open browser: http://your-server-ip/

# Test barcode registration via command line
cd /opt/barcode-scanner
source venv/bin/activate
python3 src/register_device.py --barcode 1234567890123

# Test commercial functionality
python3 src/register_device.py --commercial-test

# Check system statistics
python3 src/register_device.py --status

================================================================================
STEP 8: MONITORING AND LOGS
================================================================================

# View application logs
sudo journalctl -u barcode-scanner -f

# View nginx logs
sudo tail -f /var/log/nginx/access.log
sudo tail -f /var/log/nginx/error.log

# Check service status
sudo systemctl status barcode-scanner
sudo systemctl status nginx

# Monitor system resources
htop
df -h

================================================================================
PRODUCTION CHECKLIST
================================================================================

□ Azure IoT Hub connection string configured correctly
□ Systemd service running and enabled
□ Nginx proxy working correctly  
□ Firewall configured (ports 22, 80, 443 open)
□ SSL certificate installed (recommended)
□ Database permissions set correctly
□ Log rotation configured
□ Backup strategy in place
□ Health monitoring endpoints accessible

================================================================================
USER ACCESS (PLUG-AND-PLAY)
================================================================================

END USERS SIMPLY NEED TO:
1. Open web browser
2. Go to: http://your-server-ip/ (or https://your-domain.com)
3. Enter barcode in the input field
4. Click "Scan Barcode"
5. System automatically handles everything else!

NO TECHNICAL KNOWLEDGE REQUIRED:
✓ No device ID input needed
✓ No configuration required  
✓ Automatic device registration with Azure IoT Hub
✓ Real-time feedback and confirmation
✓ Works on any device with web browser
✓ Mobile-friendly interface

================================================================================
TROUBLESHOOTING
================================================================================

SERVICE WON'T START:
sudo journalctl -u barcode-scanner -n 50

WEB INTERFACE NOT ACCESSIBLE:
sudo systemctl status nginx
sudo nginx -t
curl http://localhost:5000/health

DATABASE PERMISSION ERRORS:
sudo chown -R barcode-scanner:barcode-scanner /opt/barcode-scanner

AZURE IOT HUB CONNECTION ISSUES:
- Check connection string in config.json
- Verify internet connectivity
- Test with: python3 src/register_device.py --test-connection

HIGH LOAD (1000+ DEVICES):
- Monitor with: htop, df -h
- Check Azure IoT Hub quotas
- Enable log rotation: sudo logrotate -f /etc/logrotate.conf

================================================================================
SCALING FOR COMMERCIAL USE
================================================================================

FOR 1000+ DEVICES:
- Increase server specs (8GB+ RAM, SSD storage)
- Set up database backup automation
- Monitor Azure IoT Hub message quotas
- Consider load balancing for multiple servers
- Implement proper log rotation and archiving

BATCH PROCESSING:
python3 src/register_device.py --batch-file barcode_list.txt

PERFORMANCE MONITORING:
- /health endpoint for uptime monitoring
- /api/stats for system statistics
- Database size monitoring
- Azure IoT Hub quota monitoring

================================================================================
SUPPORT COMMANDS
================================================================================

# Quick system check
sudo systemctl status barcode-scanner nginx
curl http://localhost/health

# View recent logs
sudo journalctl -u barcode-scanner --since "1 hour ago"

# Restart services
sudo systemctl restart barcode-scanner nginx

# Update application (after uploading new code)
sudo systemctl stop barcode-scanner
cd /opt/barcode-scanner
source venv/bin/activate
pip install -r requirements.txt
sudo systemctl start barcode-scanner

================================================================================
DEPLOYMENT COMPLETE!
================================================================================

Your Commercial Barcode Scanner System is now ready for production use!

Access URL: http://your-server-ip/ or https://your-domain.com
Health Check: http://your-server-ip/health
API Stats: http://your-server-ip/api/stats

The system now supports:
✓ Plug-and-play barcode scanning via web interface
✓ Automatic device registration with Azure IoT Hub  
✓ Commercial scale deployment (1000+ devices)
✓ Real-time monitoring and statistics
✓ Robust error handling and retry mechanisms
✓ Production-ready security and service management

Users can now simply open a web browser, enter a barcode, and the system
will automatically handle device ID generation, Azure IoT Hub registration,
and data transmission - no technical knowledge required!

================================================================================
